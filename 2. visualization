import matplotlib.pyplot as plt
import numpy as np

# looking at the frequency of each brand
plt.rcParams['figure.figsize'] = (8, 5)
merek_counts = df['Merek'].value_counts()
# Shuffle the index to randomize the order
shuffled_index = np.random.permutation(merek_counts.index)
# Reorder the value counts based on shuffled index
shuffled_merek_counts = merek_counts[shuffled_index]
# Create a color map for the heatmap-like effect, with darker colors for higher frequency
max_freq = shuffled_merek_counts.max()
heatmap_colors = plt.cm.get_cmap('Blues')(shuffled_merek_counts / max_freq)
# Plot a bar chart with heatmap-like colors
plt.bar(range(len(shuffled_merek_counts)), shuffled_merek_counts, color=heatmap_colors)

plt.title('Frequency of Most Popular Items', fontsize=20)
plt.xlabel('Items')
plt.ylabel('Frequency')
plt.xticks(range(len(shuffled_merek_counts)), shuffled_merek_counts.index, rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Adding a color bar for the heatmap effect
sm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin=0, vmax=max_freq))
sm.set_array([])
cbar = plt.colorbar(sm)
cbar.set_label('Frequency', rotation=270, labelpad=15)

plt.tight_layout()
plt.show()



# looking at the frequency of most buying consument
plt.rcParams['figure.figsize'] = (8, 5)
consument_counts = df['Konsumen'].value_counts()
# Shuffle the index to randomize the order
shuffled_index = np.random.permutation(consument_counts.index)
# Reorder the value counts based on shuffled index
shuffled_consument_counts = consument_counts[shuffled_index]
# Create a color map for the heatmap-like effect, with darker colors for higher frequency
max_freq = shuffled_consument_counts.max()
heatmap_colors = plt.cm.get_cmap('Reds')(shuffled_consument_counts / max_freq)
# Plot a bar chart with heatmap-like colors
plt.bar(range(len(shuffled_consument_counts)), shuffled_consument_counts, color=heatmap_colors)
plt.title('Frequency of Most Buying Consument', fontsize=20)
plt.xlabel('Consument')
plt.ylabel('Frequency')
plt.xticks(range(len(shuffled_consument_counts)), shuffled_consument_counts.index, rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Adding a color bar for the heatmap effect
sm = plt.cm.ScalarMappable(cmap='Reds', norm=plt.Normalize(vmin=0, vmax=max_freq))
sm.set_array([])
cbar = plt.colorbar(sm)
cbar.set_label('Frequency', rotation=270, labelpad=15)

plt.tight_layout()
plt.show()



# looking at the frequency of most popular category
plt.rcParams['figure.figsize'] = (8, 5)
itemset_counts = df['Nama Produk'].value_counts()
# Shuffle the index to randomize the order
shuffled_index = np.random.permutation(itemset_counts.index)
# Reorder the value counts based on shuffled index
shuffled_itemset_counts = itemset_counts[shuffled_index]
# Create a color map for the heatmap-like effect, with darker colors for higher frequency
max_freq = shuffled_itemset_counts.max()
heatmap_colors = plt.cm.get_cmap('Purples')(shuffled_itemset_counts / max_freq)
# Plot a bar chart with heatmap-like colors
plt.bar(range(len(shuffled_itemset_counts)), shuffled_itemset_counts, color=heatmap_colors)
plt.title('Frequency of Most Popular Category', fontsize=20)
plt.xlabel('Category')
plt.ylabel('Frequency')
plt.xticks(range(len(shuffled_itemset_counts)), shuffled_itemset_counts.index, rotation=45, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Adding a color bar for the heatmap effect
sm = plt.cm.ScalarMappable(cmap='Purples', norm=plt.Normalize(vmin=0, vmax=max_freq))
sm.set_array([])
cbar = plt.colorbar(sm)
cbar.set_label('Frequency', rotation=270, labelpad=15)

plt.tight_layout()
plt.show()
